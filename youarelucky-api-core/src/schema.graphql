scalar DateTime
# schema.graphql contient votre schéma d'application . Le schéma d'application définit les opérations GraphQL que vous pouvez envoyer depuis le frontend. Nous allons examiner de plus près ce fichier dans un instant.
# Parmi les fichiers mentionnés, seul le schéma d'application défini dans server/src/schema.graphqlest pertinent pour vous en tant que développeur frontend. Ce fichier contient le schéma GraphQL qui définit toutes les opérations (requêtes, mutations et abonnements) que vous pouvez envoyer à partir de votre application frontale.

# La typeDefsconstante définit votre schéma GraphQL
# Le point d'exclamation dans la définition du type signifie que ce champ ne peut jamais être null.

type Query {
  info: String!
  getUsers(
    filter: String
    skip: Int
    first: Int
    orderBy: UserOrderByInput
  ): Feed!

  getProspects(
    filter: String
    skip: Int
    first: Int
    orderBy: UserOrderByInput
  ): FeedProspect!

  getApplicants(
    filter: String
    skip: Int
    first: Int
    orderBy: UserOrderByInput
  ): FeedApplicant!

  getPartners(
    filter: String
    skip: Int
    first: Int
    orderBy: UserOrderByInput
  ): FeedPartner!

  getCustomers(
    filter: String
    skip: Int
    first: Int
    orderBy: UserOrderByInput
  ): FeedCustomer!
}

# post: Permet aux utilisateurs authentifiés de créer un nouveau lien
# signup: Créer un compte pour un nouvel utilisateur
# login: Connecter un utilisateur existant
# vote: Permet aux utilisateurs authentifiés de voter pour un lien existant
type Mutation {
  # (!) postUser == signup
  postUser(
    name: String!
    email: String!
    password: String!
    description: String
    usertype: String
    isAdmin: Boolean
    lastName: String
    firstName: String
    mobile: String
    profile_image: String
    approved: Boolean
    refferalBonus: String
    profession: String
  ): User

  updateUser(
    name: String
    email: String!
    description: String
    usertype: String
    isAdmin: Boolean
    lastName: String
    firstName: String
    mobile: String
    profile_image: String
    approved: Boolean
    refferalBonus: String
    profession: String
  ): User

  deleteUser(email: String!): User

  postProspect(
    name: String!
    email: String!
    lastName: String
    firstName: String
    description: String
    mobile: String
    profile_image: String
    lead_source: String
    profession: String
    refferalBonus: String
    outcome: String
    recording: Boolean
    call_length: String
    my_emotions: String
    call_conclusion: String
  ): Prospect

  updateProspect(
    name: String
    email: String!
    lastName: String
    firstName: String
    description: String
    mobile: String
    profile_image: String
    lead_source: String
    profession: String
    refferalBonus: String
    outcome: String
    recording: Boolean
    call_length: String
    my_emotions: String
    call_conclusion: String
  ): Prospect

  deleteProspect(email: String!): Prospect

  postApplicant(
    name: String!
    email: String!
    lastName: String
    firstName: String
    description: String
    mobile: String
    profile_image: String
    lead_source: String
    profession: String
    refferalBonus: String
    outcome: String
    recording: Boolean
    call_length: String
    my_emotions: String
    call_conclusion: String
  ): Applicant

  updateApplicant(
    name: String
    email: String!
    lastName: String
    firstName: String
    description: String
    mobile: String
    profile_image: String
    lead_source: String
    profession: String
    refferalBonus: String
    outcome: String
    recording: Boolean
    call_length: String
    my_emotions: String
    call_conclusion: String
  ): Applicant

  deleteApplicant(email: String!): Applicant

  postPartner(
    name: String!
    email: String!
    lastName: String
    firstName: String
    description: String
    mobile: String
    profile_image: String
    lead_source: String
    profession: String
    refferalBonus: String
    outcome: String
    recording: Boolean
    call_length: String
    my_emotions: String
    call_conclusion: String
  ): Partner

  updatePartner(
    name: String
    email: String!
    lastName: String
    firstName: String
    description: String
    mobile: String
    profile_image: String
    lead_source: String
    profession: String
    refferalBonus: String
    outcome: String
    recording: Boolean
    call_length: String
    my_emotions: String
    call_conclusion: String
  ): Partner

  deletePartner(email: String!): Partner

  postCustomer(
    name: String!
    email: String!
    lastName: String
    firstName: String
    description: String
    mobile: String
    profile_image: String
    lead_source: String
    profession: String
    refferalBonus: String
    outcome: String
    recording: Boolean
    call_length: String
    my_emotions: String
    call_conclusion: String
  ): Customer

  updateCustomer(
    name: String
    email: String!
    lastName: String
    firstName: String
    description: String
    mobile: String
    profile_image: String
    lead_source: String
    profession: String
    refferalBonus: String
    outcome: String
    recording: Boolean
    call_length: String
    my_emotions: String
    call_conclusion: String
  ): Customer

  deleteCustomer(email: String!): Customer

  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
}

type AuthPayload {
  token: String
  user: User
}

# Récupère tous les liens du backend, notez que cette requête autorise également les arguments de filtrage, de tri et de pagination
type Feed {
  users: [User!]!
  count: Int!
}

type FeedProspect {
  prospects: [Prospect!]!
  count: Int!
}

type FeedApplicant {
  applicants: [Applicant!]!
  count: Int!
}

type FeedPartner {
  partners: [Partner!]!
  count: Int!
}

type FeedCustomer {
  customers: [Customer!]!
  count: Int!
}

type User {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  description: String
  usertype: String
  isAdmin: Boolean
  lastName: String
  firstName: String
  updatedAt: DateTime!
  mobile: String
  profile_image: String
  approved: Boolean
  refferalBonus: String
  profession: String
}

type Prospect {
  id: ID!
  name: String!
  email: String!
  lastName: String
  firstName: String
  createdAt: DateTime!
  description: String
  mobile: String
  profile_image: String
  lead_source: String
  profession: String
  refferalBonus: String
  outcome: String
  recording: Boolean
  call_length: String
  my_emotions: String
  call_conclusion: String
}

type Applicant {
  id: ID!
  name: String!
  email: String!
  lastName: String
  firstName: String
  createdAt: DateTime!
  description: String
  mobile: String
  profile_image: String
  lead_source: String
  profession: String
  refferalBonus: String
  outcome: String
  recording: Boolean
  call_length: String
  my_emotions: String
  call_conclusion: String
}

type Partner {
  id: ID!
  name: String!
  email: String!
  lastName: String
  firstName: String
  createdAt: DateTime!
  description: String
  mobile: String
  profile_image: String
  lead_source: String
  profession: String
  refferalBonus: String
  outcome: String
  recording: Boolean
  call_length: String
  my_emotions: String
  call_conclusion: String
}

type Customer {
  id: ID!
  name: String!
  email: String!
  lastName: String
  firstName: String
  createdAt: DateTime!
  description: String
  mobile: String
  profile_image: String
  lead_source: String
  profession: String
  refferalBonus: String
  outcome: String
  recording: Boolean
  call_length: String
  my_emotions: String
  call_conclusion: String
}

type Reward {
  id: ID!
  amount: String
  key: String
  updatedAt: DateTime
}

enum UserOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

enum ProspectOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

enum ApplicantOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

enum PartnerOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

enum CustomerOrderByInput {
  createdAt_ASC
  createdAt_DESC
}

# login(email: String!, password: String!): AuthPayload
# login est une fonction que prend deux paramètre email et password. Les deux sont de type String et le point d'exclamation indique qui est obligatoire "!". Les deux points ":" suivi d'un type concerne le return en gros ils retournent une valeur de type AuthPayload
