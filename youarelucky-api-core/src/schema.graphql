scalar DateTime
# schema.graphql contient votre schéma d'application . Le schéma d'application définit les opérations GraphQL que vous pouvez envoyer depuis le frontend. Nous allons examiner de plus près ce fichier dans un instant.
# Parmi les fichiers mentionnés, seul le schéma d'application défini dans server/src/schema.graphqlest pertinent pour vous en tant que développeur frontend. Ce fichier contient le schéma GraphQL qui définit toutes les opérations (requêtes, mutations et abonnements) que vous pouvez envoyer à partir de votre application frontale.

# La typeDefsconstante définit votre schéma GraphQL
# Le point d'exclamation dans la définition du type signifie que ce champ ne peut jamais être null.

type Query {
  info: String!
  getUsers(
    filter: String
    skip: Int
    first: Int
    orderBy: UserOrderByInput
  ): Feed!
}

# post: Permet aux utilisateurs authentifiés de créer un nouveau lien
# signup: Créer un compte pour un nouvel utilisateur
# login: Connecter un utilisateur existant
# vote: Permet aux utilisateurs authentifiés de voter pour un lien existant
type Mutation {
  # (!) postUser == signup
  postUser(
    name: String!
    email: String!
    password: String!
    description: String
    usertype: String
    isAdmin: Boolean
    lastName: String
    firstName: String
    mobile: String
    profile_image: String
    approved: Boolean
    refferalBonus: String
    profession: String
  ): User

  updateUser(
    name: String
    email: String!
    description: String
    usertype: String
    isAdmin: Boolean
    lastName: String
    firstName: String
    mobile: String
    profile_image: String
    approved: Boolean
    refferalBonus: String
    profession: String
  ): User

  deleteUser(email: String!): User

  signup(email: String!, password: String!, name: String!): AuthPayload
  login(email: String!, password: String!): AuthPayload
}

type AuthPayload {
  token: String
  user: User
}

# Récupère tous les liens du backend, notez que cette requête autorise également les arguments de filtrage, de tri et de pagination
type Feed {
  users: [User!]!
  count: Int!
}

type User {
  id: ID!
  name: String!
  email: String!
  createdAt: DateTime!
  description: String
  usertype: String
  isAdmin: Boolean
  lastName: String
  firstName: String
  updatedAt: DateTime!
  mobile: String
  profile_image: String
  approved: Boolean
  refferalBonus: String
  profession: String
}

type Reward {
  id: ID!
  amount: String
  key: String
  updatedAt: DateTime
}

enum UserOrderByInput {
  description_ASC
  description_DESC
  url_ASC
  url_DESC
  createdAt_ASC
  createdAt_DESC
}

# login(email: String!, password: String!): AuthPayload
# login est une fonction que prend deux paramètre email et password. Les deux sont de type String et le point d'exclamation indique qui est obligatoire "!". Les deux points ":" suivi d'un type concerne le return en gros ils retournent une valeur de type AuthPayload
