// Code generated by Prisma (prisma@1.34.10). DO NOT EDIT.
// Please don't change this file manually but run `prisma generate` to update it.
// For more information, please read the docs: https://www.prisma.io/docs/prisma-client/

import { DocumentNode } from "graphql";
import {
  makePrismaClientClass,
  BaseClientOptions,
  Model
} from "prisma-client-lib";
import { typeDefs } from "./prisma-schema";

export type AtLeastOne<T, U = { [K in keyof T]: Pick<T, K> }> = Partial<T> &
  U[keyof U];

export type Maybe<T> = T | undefined | null;

export interface Exists {
  applicant: (where?: ApplicantWhereInput) => Promise<boolean>;
  customer: (where?: CustomerWhereInput) => Promise<boolean>;
  partner: (where?: PartnerWhereInput) => Promise<boolean>;
  prospect: (where?: ProspectWhereInput) => Promise<boolean>;
  user: (where?: UserWhereInput) => Promise<boolean>;
}

export interface Node {}

export type FragmentableArray<T> = Promise<Array<T>> & Fragmentable;

export interface Fragmentable {
  $fragment<T>(fragment: string | DocumentNode): Promise<T>;
}

export interface Prisma {
  $exists: Exists;
  $graphql: <T = any>(
    query: string,
    variables?: { [key: string]: any }
  ) => Promise<T>;

  /**
   * Queries
   */

  applicant: (where: ApplicantWhereUniqueInput) => ApplicantNullablePromise;
  applicants: (args?: {
    where?: ApplicantWhereInput;
    orderBy?: ApplicantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Applicant>;
  applicantsConnection: (args?: {
    where?: ApplicantWhereInput;
    orderBy?: ApplicantOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ApplicantConnectionPromise;
  customer: (where: CustomerWhereUniqueInput) => CustomerNullablePromise;
  customers: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Customer>;
  customersConnection: (args?: {
    where?: CustomerWhereInput;
    orderBy?: CustomerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => CustomerConnectionPromise;
  partner: (where: PartnerWhereUniqueInput) => PartnerNullablePromise;
  partners: (args?: {
    where?: PartnerWhereInput;
    orderBy?: PartnerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Partner>;
  partnersConnection: (args?: {
    where?: PartnerWhereInput;
    orderBy?: PartnerOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => PartnerConnectionPromise;
  prospect: (where: ProspectWhereUniqueInput) => ProspectNullablePromise;
  prospects: (args?: {
    where?: ProspectWhereInput;
    orderBy?: ProspectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<Prospect>;
  prospectsConnection: (args?: {
    where?: ProspectWhereInput;
    orderBy?: ProspectOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => ProspectConnectionPromise;
  user: (where: UserWhereUniqueInput) => UserNullablePromise;
  users: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => FragmentableArray<User>;
  usersConnection: (args?: {
    where?: UserWhereInput;
    orderBy?: UserOrderByInput;
    skip?: Int;
    after?: String;
    before?: String;
    first?: Int;
    last?: Int;
  }) => UserConnectionPromise;
  node: (args: { id: ID_Output }) => Node;

  /**
   * Mutations
   */

  createApplicant: (data: ApplicantCreateInput) => ApplicantPromise;
  updateApplicant: (args: {
    data: ApplicantUpdateInput;
    where: ApplicantWhereUniqueInput;
  }) => ApplicantPromise;
  updateManyApplicants: (args: {
    data: ApplicantUpdateManyMutationInput;
    where?: ApplicantWhereInput;
  }) => BatchPayloadPromise;
  upsertApplicant: (args: {
    where: ApplicantWhereUniqueInput;
    create: ApplicantCreateInput;
    update: ApplicantUpdateInput;
  }) => ApplicantPromise;
  deleteApplicant: (where: ApplicantWhereUniqueInput) => ApplicantPromise;
  deleteManyApplicants: (where?: ApplicantWhereInput) => BatchPayloadPromise;
  createCustomer: (data: CustomerCreateInput) => CustomerPromise;
  updateCustomer: (args: {
    data: CustomerUpdateInput;
    where: CustomerWhereUniqueInput;
  }) => CustomerPromise;
  updateManyCustomers: (args: {
    data: CustomerUpdateManyMutationInput;
    where?: CustomerWhereInput;
  }) => BatchPayloadPromise;
  upsertCustomer: (args: {
    where: CustomerWhereUniqueInput;
    create: CustomerCreateInput;
    update: CustomerUpdateInput;
  }) => CustomerPromise;
  deleteCustomer: (where: CustomerWhereUniqueInput) => CustomerPromise;
  deleteManyCustomers: (where?: CustomerWhereInput) => BatchPayloadPromise;
  createPartner: (data: PartnerCreateInput) => PartnerPromise;
  updatePartner: (args: {
    data: PartnerUpdateInput;
    where: PartnerWhereUniqueInput;
  }) => PartnerPromise;
  updateManyPartners: (args: {
    data: PartnerUpdateManyMutationInput;
    where?: PartnerWhereInput;
  }) => BatchPayloadPromise;
  upsertPartner: (args: {
    where: PartnerWhereUniqueInput;
    create: PartnerCreateInput;
    update: PartnerUpdateInput;
  }) => PartnerPromise;
  deletePartner: (where: PartnerWhereUniqueInput) => PartnerPromise;
  deleteManyPartners: (where?: PartnerWhereInput) => BatchPayloadPromise;
  createProspect: (data: ProspectCreateInput) => ProspectPromise;
  updateProspect: (args: {
    data: ProspectUpdateInput;
    where: ProspectWhereUniqueInput;
  }) => ProspectPromise;
  updateManyProspects: (args: {
    data: ProspectUpdateManyMutationInput;
    where?: ProspectWhereInput;
  }) => BatchPayloadPromise;
  upsertProspect: (args: {
    where: ProspectWhereUniqueInput;
    create: ProspectCreateInput;
    update: ProspectUpdateInput;
  }) => ProspectPromise;
  deleteProspect: (where: ProspectWhereUniqueInput) => ProspectPromise;
  deleteManyProspects: (where?: ProspectWhereInput) => BatchPayloadPromise;
  createUser: (data: UserCreateInput) => UserPromise;
  updateUser: (args: {
    data: UserUpdateInput;
    where: UserWhereUniqueInput;
  }) => UserPromise;
  updateManyUsers: (args: {
    data: UserUpdateManyMutationInput;
    where?: UserWhereInput;
  }) => BatchPayloadPromise;
  upsertUser: (args: {
    where: UserWhereUniqueInput;
    create: UserCreateInput;
    update: UserUpdateInput;
  }) => UserPromise;
  deleteUser: (where: UserWhereUniqueInput) => UserPromise;
  deleteManyUsers: (where?: UserWhereInput) => BatchPayloadPromise;

  /**
   * Subscriptions
   */

  $subscribe: Subscription;
}

export interface Subscription {
  applicant: (
    where?: ApplicantSubscriptionWhereInput
  ) => ApplicantSubscriptionPayloadSubscription;
  customer: (
    where?: CustomerSubscriptionWhereInput
  ) => CustomerSubscriptionPayloadSubscription;
  partner: (
    where?: PartnerSubscriptionWhereInput
  ) => PartnerSubscriptionPayloadSubscription;
  prospect: (
    where?: ProspectSubscriptionWhereInput
  ) => ProspectSubscriptionPayloadSubscription;
  user: (
    where?: UserSubscriptionWhereInput
  ) => UserSubscriptionPayloadSubscription;
}

export interface ClientConstructor<T> {
  new (options?: BaseClientOptions): T;
}

/**
 * Types
 */

export type ApplicantOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "call_length_ASC"
  | "call_length_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "mobile_ASC"
  | "mobile_DESC"
  | "profile_image_ASC"
  | "profile_image_DESC"
  | "lead_source_ASC"
  | "lead_source_DESC"
  | "refferalBonus_ASC"
  | "refferalBonus_DESC"
  | "profession_ASC"
  | "profession_DESC"
  | "outcome_ASC"
  | "outcome_DESC"
  | "recording_ASC"
  | "recording_DESC"
  | "my_emotions_ASC"
  | "my_emotions_DESC"
  | "call_conclusion_ASC"
  | "call_conclusion_DESC";

export type CustomerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "call_length_ASC"
  | "call_length_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "mobile_ASC"
  | "mobile_DESC"
  | "profile_image_ASC"
  | "profile_image_DESC"
  | "lead_source_ASC"
  | "lead_source_DESC"
  | "refferalBonus_ASC"
  | "refferalBonus_DESC"
  | "profession_ASC"
  | "profession_DESC"
  | "outcome_ASC"
  | "outcome_DESC"
  | "recording_ASC"
  | "recording_DESC"
  | "my_emotions_ASC"
  | "my_emotions_DESC"
  | "call_conclusion_ASC"
  | "call_conclusion_DESC";

export type PartnerOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "call_length_ASC"
  | "call_length_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "mobile_ASC"
  | "mobile_DESC"
  | "profile_image_ASC"
  | "profile_image_DESC"
  | "lead_source_ASC"
  | "lead_source_DESC"
  | "refferalBonus_ASC"
  | "refferalBonus_DESC"
  | "profession_ASC"
  | "profession_DESC"
  | "outcome_ASC"
  | "outcome_DESC"
  | "recording_ASC"
  | "recording_DESC"
  | "my_emotions_ASC"
  | "my_emotions_DESC"
  | "call_conclusion_ASC"
  | "call_conclusion_DESC";

export type ProspectOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "call_length_ASC"
  | "call_length_DESC"
  | "description_ASC"
  | "description_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "mobile_ASC"
  | "mobile_DESC"
  | "profile_image_ASC"
  | "profile_image_DESC"
  | "lead_source_ASC"
  | "lead_source_DESC"
  | "refferalBonus_ASC"
  | "refferalBonus_DESC"
  | "profession_ASC"
  | "profession_DESC"
  | "outcome_ASC"
  | "outcome_DESC"
  | "recording_ASC"
  | "recording_DESC"
  | "my_emotions_ASC"
  | "my_emotions_DESC"
  | "call_conclusion_ASC"
  | "call_conclusion_DESC";

export type MutationType = "CREATED" | "UPDATED" | "DELETED";

export type UserOrderByInput =
  | "id_ASC"
  | "id_DESC"
  | "name_ASC"
  | "name_DESC"
  | "email_ASC"
  | "email_DESC"
  | "createdAt_ASC"
  | "createdAt_DESC"
  | "description_ASC"
  | "description_DESC"
  | "password_ASC"
  | "password_DESC"
  | "usertype_ASC"
  | "usertype_DESC"
  | "isAdmin_ASC"
  | "isAdmin_DESC"
  | "lastName_ASC"
  | "lastName_DESC"
  | "firstName_ASC"
  | "firstName_DESC"
  | "updatedAt_ASC"
  | "updatedAt_DESC"
  | "mobile_ASC"
  | "mobile_DESC"
  | "profile_image_ASC"
  | "profile_image_DESC"
  | "approved_ASC"
  | "approved_DESC"
  | "refferalBonus_ASC"
  | "refferalBonus_DESC"
  | "profession_ASC"
  | "profession_DESC";

export type ApplicantWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface PartnerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  call_length?: Maybe<String>;
  call_length_not?: Maybe<String>;
  call_length_in?: Maybe<String[] | String>;
  call_length_not_in?: Maybe<String[] | String>;
  call_length_lt?: Maybe<String>;
  call_length_lte?: Maybe<String>;
  call_length_gt?: Maybe<String>;
  call_length_gte?: Maybe<String>;
  call_length_contains?: Maybe<String>;
  call_length_not_contains?: Maybe<String>;
  call_length_starts_with?: Maybe<String>;
  call_length_not_starts_with?: Maybe<String>;
  call_length_ends_with?: Maybe<String>;
  call_length_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  mobile?: Maybe<String>;
  mobile_not?: Maybe<String>;
  mobile_in?: Maybe<String[] | String>;
  mobile_not_in?: Maybe<String[] | String>;
  mobile_lt?: Maybe<String>;
  mobile_lte?: Maybe<String>;
  mobile_gt?: Maybe<String>;
  mobile_gte?: Maybe<String>;
  mobile_contains?: Maybe<String>;
  mobile_not_contains?: Maybe<String>;
  mobile_starts_with?: Maybe<String>;
  mobile_not_starts_with?: Maybe<String>;
  mobile_ends_with?: Maybe<String>;
  mobile_not_ends_with?: Maybe<String>;
  profile_image?: Maybe<String>;
  profile_image_not?: Maybe<String>;
  profile_image_in?: Maybe<String[] | String>;
  profile_image_not_in?: Maybe<String[] | String>;
  profile_image_lt?: Maybe<String>;
  profile_image_lte?: Maybe<String>;
  profile_image_gt?: Maybe<String>;
  profile_image_gte?: Maybe<String>;
  profile_image_contains?: Maybe<String>;
  profile_image_not_contains?: Maybe<String>;
  profile_image_starts_with?: Maybe<String>;
  profile_image_not_starts_with?: Maybe<String>;
  profile_image_ends_with?: Maybe<String>;
  profile_image_not_ends_with?: Maybe<String>;
  lead_source?: Maybe<String>;
  lead_source_not?: Maybe<String>;
  lead_source_in?: Maybe<String[] | String>;
  lead_source_not_in?: Maybe<String[] | String>;
  lead_source_lt?: Maybe<String>;
  lead_source_lte?: Maybe<String>;
  lead_source_gt?: Maybe<String>;
  lead_source_gte?: Maybe<String>;
  lead_source_contains?: Maybe<String>;
  lead_source_not_contains?: Maybe<String>;
  lead_source_starts_with?: Maybe<String>;
  lead_source_not_starts_with?: Maybe<String>;
  lead_source_ends_with?: Maybe<String>;
  lead_source_not_ends_with?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  refferalBonus_not?: Maybe<String>;
  refferalBonus_in?: Maybe<String[] | String>;
  refferalBonus_not_in?: Maybe<String[] | String>;
  refferalBonus_lt?: Maybe<String>;
  refferalBonus_lte?: Maybe<String>;
  refferalBonus_gt?: Maybe<String>;
  refferalBonus_gte?: Maybe<String>;
  refferalBonus_contains?: Maybe<String>;
  refferalBonus_not_contains?: Maybe<String>;
  refferalBonus_starts_with?: Maybe<String>;
  refferalBonus_not_starts_with?: Maybe<String>;
  refferalBonus_ends_with?: Maybe<String>;
  refferalBonus_not_ends_with?: Maybe<String>;
  profession?: Maybe<String>;
  profession_not?: Maybe<String>;
  profession_in?: Maybe<String[] | String>;
  profession_not_in?: Maybe<String[] | String>;
  profession_lt?: Maybe<String>;
  profession_lte?: Maybe<String>;
  profession_gt?: Maybe<String>;
  profession_gte?: Maybe<String>;
  profession_contains?: Maybe<String>;
  profession_not_contains?: Maybe<String>;
  profession_starts_with?: Maybe<String>;
  profession_not_starts_with?: Maybe<String>;
  profession_ends_with?: Maybe<String>;
  profession_not_ends_with?: Maybe<String>;
  outcome?: Maybe<String>;
  outcome_not?: Maybe<String>;
  outcome_in?: Maybe<String[] | String>;
  outcome_not_in?: Maybe<String[] | String>;
  outcome_lt?: Maybe<String>;
  outcome_lte?: Maybe<String>;
  outcome_gt?: Maybe<String>;
  outcome_gte?: Maybe<String>;
  outcome_contains?: Maybe<String>;
  outcome_not_contains?: Maybe<String>;
  outcome_starts_with?: Maybe<String>;
  outcome_not_starts_with?: Maybe<String>;
  outcome_ends_with?: Maybe<String>;
  outcome_not_ends_with?: Maybe<String>;
  recording?: Maybe<Boolean>;
  recording_not?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  my_emotions_not?: Maybe<String>;
  my_emotions_in?: Maybe<String[] | String>;
  my_emotions_not_in?: Maybe<String[] | String>;
  my_emotions_lt?: Maybe<String>;
  my_emotions_lte?: Maybe<String>;
  my_emotions_gt?: Maybe<String>;
  my_emotions_gte?: Maybe<String>;
  my_emotions_contains?: Maybe<String>;
  my_emotions_not_contains?: Maybe<String>;
  my_emotions_starts_with?: Maybe<String>;
  my_emotions_not_starts_with?: Maybe<String>;
  my_emotions_ends_with?: Maybe<String>;
  my_emotions_not_ends_with?: Maybe<String>;
  call_conclusion?: Maybe<String>;
  call_conclusion_not?: Maybe<String>;
  call_conclusion_in?: Maybe<String[] | String>;
  call_conclusion_not_in?: Maybe<String[] | String>;
  call_conclusion_lt?: Maybe<String>;
  call_conclusion_lte?: Maybe<String>;
  call_conclusion_gt?: Maybe<String>;
  call_conclusion_gte?: Maybe<String>;
  call_conclusion_contains?: Maybe<String>;
  call_conclusion_not_contains?: Maybe<String>;
  call_conclusion_starts_with?: Maybe<String>;
  call_conclusion_not_starts_with?: Maybe<String>;
  call_conclusion_ends_with?: Maybe<String>;
  call_conclusion_not_ends_with?: Maybe<String>;
  AND?: Maybe<PartnerWhereInput[] | PartnerWhereInput>;
  OR?: Maybe<PartnerWhereInput[] | PartnerWhereInput>;
  NOT?: Maybe<PartnerWhereInput[] | PartnerWhereInput>;
}

export interface UserWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  password?: Maybe<String>;
  password_not?: Maybe<String>;
  password_in?: Maybe<String[] | String>;
  password_not_in?: Maybe<String[] | String>;
  password_lt?: Maybe<String>;
  password_lte?: Maybe<String>;
  password_gt?: Maybe<String>;
  password_gte?: Maybe<String>;
  password_contains?: Maybe<String>;
  password_not_contains?: Maybe<String>;
  password_starts_with?: Maybe<String>;
  password_not_starts_with?: Maybe<String>;
  password_ends_with?: Maybe<String>;
  password_not_ends_with?: Maybe<String>;
  usertype?: Maybe<String>;
  usertype_not?: Maybe<String>;
  usertype_in?: Maybe<String[] | String>;
  usertype_not_in?: Maybe<String[] | String>;
  usertype_lt?: Maybe<String>;
  usertype_lte?: Maybe<String>;
  usertype_gt?: Maybe<String>;
  usertype_gte?: Maybe<String>;
  usertype_contains?: Maybe<String>;
  usertype_not_contains?: Maybe<String>;
  usertype_starts_with?: Maybe<String>;
  usertype_not_starts_with?: Maybe<String>;
  usertype_ends_with?: Maybe<String>;
  usertype_not_ends_with?: Maybe<String>;
  isAdmin?: Maybe<Boolean>;
  isAdmin_not?: Maybe<Boolean>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  mobile?: Maybe<String>;
  mobile_not?: Maybe<String>;
  mobile_in?: Maybe<String[] | String>;
  mobile_not_in?: Maybe<String[] | String>;
  mobile_lt?: Maybe<String>;
  mobile_lte?: Maybe<String>;
  mobile_gt?: Maybe<String>;
  mobile_gte?: Maybe<String>;
  mobile_contains?: Maybe<String>;
  mobile_not_contains?: Maybe<String>;
  mobile_starts_with?: Maybe<String>;
  mobile_not_starts_with?: Maybe<String>;
  mobile_ends_with?: Maybe<String>;
  mobile_not_ends_with?: Maybe<String>;
  profile_image?: Maybe<String>;
  profile_image_not?: Maybe<String>;
  profile_image_in?: Maybe<String[] | String>;
  profile_image_not_in?: Maybe<String[] | String>;
  profile_image_lt?: Maybe<String>;
  profile_image_lte?: Maybe<String>;
  profile_image_gt?: Maybe<String>;
  profile_image_gte?: Maybe<String>;
  profile_image_contains?: Maybe<String>;
  profile_image_not_contains?: Maybe<String>;
  profile_image_starts_with?: Maybe<String>;
  profile_image_not_starts_with?: Maybe<String>;
  profile_image_ends_with?: Maybe<String>;
  profile_image_not_ends_with?: Maybe<String>;
  approved?: Maybe<Boolean>;
  approved_not?: Maybe<Boolean>;
  refferalBonus?: Maybe<String>;
  refferalBonus_not?: Maybe<String>;
  refferalBonus_in?: Maybe<String[] | String>;
  refferalBonus_not_in?: Maybe<String[] | String>;
  refferalBonus_lt?: Maybe<String>;
  refferalBonus_lte?: Maybe<String>;
  refferalBonus_gt?: Maybe<String>;
  refferalBonus_gte?: Maybe<String>;
  refferalBonus_contains?: Maybe<String>;
  refferalBonus_not_contains?: Maybe<String>;
  refferalBonus_starts_with?: Maybe<String>;
  refferalBonus_not_starts_with?: Maybe<String>;
  refferalBonus_ends_with?: Maybe<String>;
  refferalBonus_not_ends_with?: Maybe<String>;
  profession?: Maybe<String>;
  profession_not?: Maybe<String>;
  profession_in?: Maybe<String[] | String>;
  profession_not_in?: Maybe<String[] | String>;
  profession_lt?: Maybe<String>;
  profession_lte?: Maybe<String>;
  profession_gt?: Maybe<String>;
  profession_gte?: Maybe<String>;
  profession_contains?: Maybe<String>;
  profession_not_contains?: Maybe<String>;
  profession_starts_with?: Maybe<String>;
  profession_not_starts_with?: Maybe<String>;
  profession_ends_with?: Maybe<String>;
  profession_not_ends_with?: Maybe<String>;
  AND?: Maybe<UserWhereInput[] | UserWhereInput>;
  OR?: Maybe<UserWhereInput[] | UserWhereInput>;
  NOT?: Maybe<UserWhereInput[] | UserWhereInput>;
}

export interface ProspectCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email: String;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export interface ApplicantWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  call_length?: Maybe<String>;
  call_length_not?: Maybe<String>;
  call_length_in?: Maybe<String[] | String>;
  call_length_not_in?: Maybe<String[] | String>;
  call_length_lt?: Maybe<String>;
  call_length_lte?: Maybe<String>;
  call_length_gt?: Maybe<String>;
  call_length_gte?: Maybe<String>;
  call_length_contains?: Maybe<String>;
  call_length_not_contains?: Maybe<String>;
  call_length_starts_with?: Maybe<String>;
  call_length_not_starts_with?: Maybe<String>;
  call_length_ends_with?: Maybe<String>;
  call_length_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  mobile?: Maybe<String>;
  mobile_not?: Maybe<String>;
  mobile_in?: Maybe<String[] | String>;
  mobile_not_in?: Maybe<String[] | String>;
  mobile_lt?: Maybe<String>;
  mobile_lte?: Maybe<String>;
  mobile_gt?: Maybe<String>;
  mobile_gte?: Maybe<String>;
  mobile_contains?: Maybe<String>;
  mobile_not_contains?: Maybe<String>;
  mobile_starts_with?: Maybe<String>;
  mobile_not_starts_with?: Maybe<String>;
  mobile_ends_with?: Maybe<String>;
  mobile_not_ends_with?: Maybe<String>;
  profile_image?: Maybe<String>;
  profile_image_not?: Maybe<String>;
  profile_image_in?: Maybe<String[] | String>;
  profile_image_not_in?: Maybe<String[] | String>;
  profile_image_lt?: Maybe<String>;
  profile_image_lte?: Maybe<String>;
  profile_image_gt?: Maybe<String>;
  profile_image_gte?: Maybe<String>;
  profile_image_contains?: Maybe<String>;
  profile_image_not_contains?: Maybe<String>;
  profile_image_starts_with?: Maybe<String>;
  profile_image_not_starts_with?: Maybe<String>;
  profile_image_ends_with?: Maybe<String>;
  profile_image_not_ends_with?: Maybe<String>;
  lead_source?: Maybe<String>;
  lead_source_not?: Maybe<String>;
  lead_source_in?: Maybe<String[] | String>;
  lead_source_not_in?: Maybe<String[] | String>;
  lead_source_lt?: Maybe<String>;
  lead_source_lte?: Maybe<String>;
  lead_source_gt?: Maybe<String>;
  lead_source_gte?: Maybe<String>;
  lead_source_contains?: Maybe<String>;
  lead_source_not_contains?: Maybe<String>;
  lead_source_starts_with?: Maybe<String>;
  lead_source_not_starts_with?: Maybe<String>;
  lead_source_ends_with?: Maybe<String>;
  lead_source_not_ends_with?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  refferalBonus_not?: Maybe<String>;
  refferalBonus_in?: Maybe<String[] | String>;
  refferalBonus_not_in?: Maybe<String[] | String>;
  refferalBonus_lt?: Maybe<String>;
  refferalBonus_lte?: Maybe<String>;
  refferalBonus_gt?: Maybe<String>;
  refferalBonus_gte?: Maybe<String>;
  refferalBonus_contains?: Maybe<String>;
  refferalBonus_not_contains?: Maybe<String>;
  refferalBonus_starts_with?: Maybe<String>;
  refferalBonus_not_starts_with?: Maybe<String>;
  refferalBonus_ends_with?: Maybe<String>;
  refferalBonus_not_ends_with?: Maybe<String>;
  profession?: Maybe<String>;
  profession_not?: Maybe<String>;
  profession_in?: Maybe<String[] | String>;
  profession_not_in?: Maybe<String[] | String>;
  profession_lt?: Maybe<String>;
  profession_lte?: Maybe<String>;
  profession_gt?: Maybe<String>;
  profession_gte?: Maybe<String>;
  profession_contains?: Maybe<String>;
  profession_not_contains?: Maybe<String>;
  profession_starts_with?: Maybe<String>;
  profession_not_starts_with?: Maybe<String>;
  profession_ends_with?: Maybe<String>;
  profession_not_ends_with?: Maybe<String>;
  outcome?: Maybe<String>;
  outcome_not?: Maybe<String>;
  outcome_in?: Maybe<String[] | String>;
  outcome_not_in?: Maybe<String[] | String>;
  outcome_lt?: Maybe<String>;
  outcome_lte?: Maybe<String>;
  outcome_gt?: Maybe<String>;
  outcome_gte?: Maybe<String>;
  outcome_contains?: Maybe<String>;
  outcome_not_contains?: Maybe<String>;
  outcome_starts_with?: Maybe<String>;
  outcome_not_starts_with?: Maybe<String>;
  outcome_ends_with?: Maybe<String>;
  outcome_not_ends_with?: Maybe<String>;
  recording?: Maybe<Boolean>;
  recording_not?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  my_emotions_not?: Maybe<String>;
  my_emotions_in?: Maybe<String[] | String>;
  my_emotions_not_in?: Maybe<String[] | String>;
  my_emotions_lt?: Maybe<String>;
  my_emotions_lte?: Maybe<String>;
  my_emotions_gt?: Maybe<String>;
  my_emotions_gte?: Maybe<String>;
  my_emotions_contains?: Maybe<String>;
  my_emotions_not_contains?: Maybe<String>;
  my_emotions_starts_with?: Maybe<String>;
  my_emotions_not_starts_with?: Maybe<String>;
  my_emotions_ends_with?: Maybe<String>;
  my_emotions_not_ends_with?: Maybe<String>;
  call_conclusion?: Maybe<String>;
  call_conclusion_not?: Maybe<String>;
  call_conclusion_in?: Maybe<String[] | String>;
  call_conclusion_not_in?: Maybe<String[] | String>;
  call_conclusion_lt?: Maybe<String>;
  call_conclusion_lte?: Maybe<String>;
  call_conclusion_gt?: Maybe<String>;
  call_conclusion_gte?: Maybe<String>;
  call_conclusion_contains?: Maybe<String>;
  call_conclusion_not_contains?: Maybe<String>;
  call_conclusion_starts_with?: Maybe<String>;
  call_conclusion_not_starts_with?: Maybe<String>;
  call_conclusion_ends_with?: Maybe<String>;
  call_conclusion_not_ends_with?: Maybe<String>;
  AND?: Maybe<ApplicantWhereInput[] | ApplicantWhereInput>;
  OR?: Maybe<ApplicantWhereInput[] | ApplicantWhereInput>;
  NOT?: Maybe<ApplicantWhereInput[] | ApplicantWhereInput>;
}

export interface PartnerUpdateManyMutationInput {
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email?: Maybe<String>;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export interface ProspectSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ProspectWhereInput>;
  AND?: Maybe<
    ProspectSubscriptionWhereInput[] | ProspectSubscriptionWhereInput
  >;
  OR?: Maybe<ProspectSubscriptionWhereInput[] | ProspectSubscriptionWhereInput>;
  NOT?: Maybe<
    ProspectSubscriptionWhereInput[] | ProspectSubscriptionWhereInput
  >;
}

export interface PartnerUpdateInput {
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email?: Maybe<String>;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export interface CustomerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<CustomerWhereInput>;
  AND?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
  OR?: Maybe<CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput>;
  NOT?: Maybe<
    CustomerSubscriptionWhereInput[] | CustomerSubscriptionWhereInput
  >;
}

export interface PartnerCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email: String;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export interface ApplicantSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<ApplicantWhereInput>;
  AND?: Maybe<
    ApplicantSubscriptionWhereInput[] | ApplicantSubscriptionWhereInput
  >;
  OR?: Maybe<
    ApplicantSubscriptionWhereInput[] | ApplicantSubscriptionWhereInput
  >;
  NOT?: Maybe<
    ApplicantSubscriptionWhereInput[] | ApplicantSubscriptionWhereInput
  >;
}

export type ProspectWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserUpdateManyMutationInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  description?: Maybe<String>;
  password?: Maybe<String>;
  usertype?: Maybe<String>;
  isAdmin?: Maybe<Boolean>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  approved?: Maybe<Boolean>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
}

export interface CustomerUpdateManyMutationInput {
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email?: Maybe<String>;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export interface UserCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  email: String;
  description?: Maybe<String>;
  password: String;
  usertype?: Maybe<String>;
  isAdmin?: Maybe<Boolean>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  approved?: Maybe<Boolean>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
}

export interface ProspectWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  call_length?: Maybe<String>;
  call_length_not?: Maybe<String>;
  call_length_in?: Maybe<String[] | String>;
  call_length_not_in?: Maybe<String[] | String>;
  call_length_lt?: Maybe<String>;
  call_length_lte?: Maybe<String>;
  call_length_gt?: Maybe<String>;
  call_length_gte?: Maybe<String>;
  call_length_contains?: Maybe<String>;
  call_length_not_contains?: Maybe<String>;
  call_length_starts_with?: Maybe<String>;
  call_length_not_starts_with?: Maybe<String>;
  call_length_ends_with?: Maybe<String>;
  call_length_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  mobile?: Maybe<String>;
  mobile_not?: Maybe<String>;
  mobile_in?: Maybe<String[] | String>;
  mobile_not_in?: Maybe<String[] | String>;
  mobile_lt?: Maybe<String>;
  mobile_lte?: Maybe<String>;
  mobile_gt?: Maybe<String>;
  mobile_gte?: Maybe<String>;
  mobile_contains?: Maybe<String>;
  mobile_not_contains?: Maybe<String>;
  mobile_starts_with?: Maybe<String>;
  mobile_not_starts_with?: Maybe<String>;
  mobile_ends_with?: Maybe<String>;
  mobile_not_ends_with?: Maybe<String>;
  profile_image?: Maybe<String>;
  profile_image_not?: Maybe<String>;
  profile_image_in?: Maybe<String[] | String>;
  profile_image_not_in?: Maybe<String[] | String>;
  profile_image_lt?: Maybe<String>;
  profile_image_lte?: Maybe<String>;
  profile_image_gt?: Maybe<String>;
  profile_image_gte?: Maybe<String>;
  profile_image_contains?: Maybe<String>;
  profile_image_not_contains?: Maybe<String>;
  profile_image_starts_with?: Maybe<String>;
  profile_image_not_starts_with?: Maybe<String>;
  profile_image_ends_with?: Maybe<String>;
  profile_image_not_ends_with?: Maybe<String>;
  lead_source?: Maybe<String>;
  lead_source_not?: Maybe<String>;
  lead_source_in?: Maybe<String[] | String>;
  lead_source_not_in?: Maybe<String[] | String>;
  lead_source_lt?: Maybe<String>;
  lead_source_lte?: Maybe<String>;
  lead_source_gt?: Maybe<String>;
  lead_source_gte?: Maybe<String>;
  lead_source_contains?: Maybe<String>;
  lead_source_not_contains?: Maybe<String>;
  lead_source_starts_with?: Maybe<String>;
  lead_source_not_starts_with?: Maybe<String>;
  lead_source_ends_with?: Maybe<String>;
  lead_source_not_ends_with?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  refferalBonus_not?: Maybe<String>;
  refferalBonus_in?: Maybe<String[] | String>;
  refferalBonus_not_in?: Maybe<String[] | String>;
  refferalBonus_lt?: Maybe<String>;
  refferalBonus_lte?: Maybe<String>;
  refferalBonus_gt?: Maybe<String>;
  refferalBonus_gte?: Maybe<String>;
  refferalBonus_contains?: Maybe<String>;
  refferalBonus_not_contains?: Maybe<String>;
  refferalBonus_starts_with?: Maybe<String>;
  refferalBonus_not_starts_with?: Maybe<String>;
  refferalBonus_ends_with?: Maybe<String>;
  refferalBonus_not_ends_with?: Maybe<String>;
  profession?: Maybe<String>;
  profession_not?: Maybe<String>;
  profession_in?: Maybe<String[] | String>;
  profession_not_in?: Maybe<String[] | String>;
  profession_lt?: Maybe<String>;
  profession_lte?: Maybe<String>;
  profession_gt?: Maybe<String>;
  profession_gte?: Maybe<String>;
  profession_contains?: Maybe<String>;
  profession_not_contains?: Maybe<String>;
  profession_starts_with?: Maybe<String>;
  profession_not_starts_with?: Maybe<String>;
  profession_ends_with?: Maybe<String>;
  profession_not_ends_with?: Maybe<String>;
  outcome?: Maybe<String>;
  outcome_not?: Maybe<String>;
  outcome_in?: Maybe<String[] | String>;
  outcome_not_in?: Maybe<String[] | String>;
  outcome_lt?: Maybe<String>;
  outcome_lte?: Maybe<String>;
  outcome_gt?: Maybe<String>;
  outcome_gte?: Maybe<String>;
  outcome_contains?: Maybe<String>;
  outcome_not_contains?: Maybe<String>;
  outcome_starts_with?: Maybe<String>;
  outcome_not_starts_with?: Maybe<String>;
  outcome_ends_with?: Maybe<String>;
  outcome_not_ends_with?: Maybe<String>;
  recording?: Maybe<Boolean>;
  recording_not?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  my_emotions_not?: Maybe<String>;
  my_emotions_in?: Maybe<String[] | String>;
  my_emotions_not_in?: Maybe<String[] | String>;
  my_emotions_lt?: Maybe<String>;
  my_emotions_lte?: Maybe<String>;
  my_emotions_gt?: Maybe<String>;
  my_emotions_gte?: Maybe<String>;
  my_emotions_contains?: Maybe<String>;
  my_emotions_not_contains?: Maybe<String>;
  my_emotions_starts_with?: Maybe<String>;
  my_emotions_not_starts_with?: Maybe<String>;
  my_emotions_ends_with?: Maybe<String>;
  my_emotions_not_ends_with?: Maybe<String>;
  call_conclusion?: Maybe<String>;
  call_conclusion_not?: Maybe<String>;
  call_conclusion_in?: Maybe<String[] | String>;
  call_conclusion_not_in?: Maybe<String[] | String>;
  call_conclusion_lt?: Maybe<String>;
  call_conclusion_lte?: Maybe<String>;
  call_conclusion_gt?: Maybe<String>;
  call_conclusion_gte?: Maybe<String>;
  call_conclusion_contains?: Maybe<String>;
  call_conclusion_not_contains?: Maybe<String>;
  call_conclusion_starts_with?: Maybe<String>;
  call_conclusion_not_starts_with?: Maybe<String>;
  call_conclusion_ends_with?: Maybe<String>;
  call_conclusion_not_ends_with?: Maybe<String>;
  AND?: Maybe<ProspectWhereInput[] | ProspectWhereInput>;
  OR?: Maybe<ProspectWhereInput[] | ProspectWhereInput>;
  NOT?: Maybe<ProspectWhereInput[] | ProspectWhereInput>;
}

export type PartnerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface CustomerUpdateInput {
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email?: Maybe<String>;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export interface UserSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<UserWhereInput>;
  AND?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  OR?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
  NOT?: Maybe<UserSubscriptionWhereInput[] | UserSubscriptionWhereInput>;
}

export interface CustomerCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email: String;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export type CustomerWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface UserUpdateInput {
  name?: Maybe<String>;
  email?: Maybe<String>;
  description?: Maybe<String>;
  password?: Maybe<String>;
  usertype?: Maybe<String>;
  isAdmin?: Maybe<Boolean>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  approved?: Maybe<Boolean>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
}

export interface ApplicantCreateInput {
  id?: Maybe<ID_Input>;
  name: String;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email: String;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export type UserWhereUniqueInput = AtLeastOne<{
  id: Maybe<ID_Input>;
  email?: Maybe<String>;
}>;

export interface ApplicantUpdateInput {
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email?: Maybe<String>;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export interface ApplicantUpdateManyMutationInput {
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email?: Maybe<String>;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export interface ProspectUpdateManyMutationInput {
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email?: Maybe<String>;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export interface CustomerWhereInput {
  id?: Maybe<ID_Input>;
  id_not?: Maybe<ID_Input>;
  id_in?: Maybe<ID_Input[] | ID_Input>;
  id_not_in?: Maybe<ID_Input[] | ID_Input>;
  id_lt?: Maybe<ID_Input>;
  id_lte?: Maybe<ID_Input>;
  id_gt?: Maybe<ID_Input>;
  id_gte?: Maybe<ID_Input>;
  id_contains?: Maybe<ID_Input>;
  id_not_contains?: Maybe<ID_Input>;
  id_starts_with?: Maybe<ID_Input>;
  id_not_starts_with?: Maybe<ID_Input>;
  id_ends_with?: Maybe<ID_Input>;
  id_not_ends_with?: Maybe<ID_Input>;
  name?: Maybe<String>;
  name_not?: Maybe<String>;
  name_in?: Maybe<String[] | String>;
  name_not_in?: Maybe<String[] | String>;
  name_lt?: Maybe<String>;
  name_lte?: Maybe<String>;
  name_gt?: Maybe<String>;
  name_gte?: Maybe<String>;
  name_contains?: Maybe<String>;
  name_not_contains?: Maybe<String>;
  name_starts_with?: Maybe<String>;
  name_not_starts_with?: Maybe<String>;
  name_ends_with?: Maybe<String>;
  name_not_ends_with?: Maybe<String>;
  lastName?: Maybe<String>;
  lastName_not?: Maybe<String>;
  lastName_in?: Maybe<String[] | String>;
  lastName_not_in?: Maybe<String[] | String>;
  lastName_lt?: Maybe<String>;
  lastName_lte?: Maybe<String>;
  lastName_gt?: Maybe<String>;
  lastName_gte?: Maybe<String>;
  lastName_contains?: Maybe<String>;
  lastName_not_contains?: Maybe<String>;
  lastName_starts_with?: Maybe<String>;
  lastName_not_starts_with?: Maybe<String>;
  lastName_ends_with?: Maybe<String>;
  lastName_not_ends_with?: Maybe<String>;
  firstName?: Maybe<String>;
  firstName_not?: Maybe<String>;
  firstName_in?: Maybe<String[] | String>;
  firstName_not_in?: Maybe<String[] | String>;
  firstName_lt?: Maybe<String>;
  firstName_lte?: Maybe<String>;
  firstName_gt?: Maybe<String>;
  firstName_gte?: Maybe<String>;
  firstName_contains?: Maybe<String>;
  firstName_not_contains?: Maybe<String>;
  firstName_starts_with?: Maybe<String>;
  firstName_not_starts_with?: Maybe<String>;
  firstName_ends_with?: Maybe<String>;
  firstName_not_ends_with?: Maybe<String>;
  email?: Maybe<String>;
  email_not?: Maybe<String>;
  email_in?: Maybe<String[] | String>;
  email_not_in?: Maybe<String[] | String>;
  email_lt?: Maybe<String>;
  email_lte?: Maybe<String>;
  email_gt?: Maybe<String>;
  email_gte?: Maybe<String>;
  email_contains?: Maybe<String>;
  email_not_contains?: Maybe<String>;
  email_starts_with?: Maybe<String>;
  email_not_starts_with?: Maybe<String>;
  email_ends_with?: Maybe<String>;
  email_not_ends_with?: Maybe<String>;
  createdAt?: Maybe<DateTimeInput>;
  createdAt_not?: Maybe<DateTimeInput>;
  createdAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  createdAt_lt?: Maybe<DateTimeInput>;
  createdAt_lte?: Maybe<DateTimeInput>;
  createdAt_gt?: Maybe<DateTimeInput>;
  createdAt_gte?: Maybe<DateTimeInput>;
  call_length?: Maybe<String>;
  call_length_not?: Maybe<String>;
  call_length_in?: Maybe<String[] | String>;
  call_length_not_in?: Maybe<String[] | String>;
  call_length_lt?: Maybe<String>;
  call_length_lte?: Maybe<String>;
  call_length_gt?: Maybe<String>;
  call_length_gte?: Maybe<String>;
  call_length_contains?: Maybe<String>;
  call_length_not_contains?: Maybe<String>;
  call_length_starts_with?: Maybe<String>;
  call_length_not_starts_with?: Maybe<String>;
  call_length_ends_with?: Maybe<String>;
  call_length_not_ends_with?: Maybe<String>;
  description?: Maybe<String>;
  description_not?: Maybe<String>;
  description_in?: Maybe<String[] | String>;
  description_not_in?: Maybe<String[] | String>;
  description_lt?: Maybe<String>;
  description_lte?: Maybe<String>;
  description_gt?: Maybe<String>;
  description_gte?: Maybe<String>;
  description_contains?: Maybe<String>;
  description_not_contains?: Maybe<String>;
  description_starts_with?: Maybe<String>;
  description_not_starts_with?: Maybe<String>;
  description_ends_with?: Maybe<String>;
  description_not_ends_with?: Maybe<String>;
  updatedAt?: Maybe<DateTimeInput>;
  updatedAt_not?: Maybe<DateTimeInput>;
  updatedAt_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_not_in?: Maybe<DateTimeInput[] | DateTimeInput>;
  updatedAt_lt?: Maybe<DateTimeInput>;
  updatedAt_lte?: Maybe<DateTimeInput>;
  updatedAt_gt?: Maybe<DateTimeInput>;
  updatedAt_gte?: Maybe<DateTimeInput>;
  mobile?: Maybe<String>;
  mobile_not?: Maybe<String>;
  mobile_in?: Maybe<String[] | String>;
  mobile_not_in?: Maybe<String[] | String>;
  mobile_lt?: Maybe<String>;
  mobile_lte?: Maybe<String>;
  mobile_gt?: Maybe<String>;
  mobile_gte?: Maybe<String>;
  mobile_contains?: Maybe<String>;
  mobile_not_contains?: Maybe<String>;
  mobile_starts_with?: Maybe<String>;
  mobile_not_starts_with?: Maybe<String>;
  mobile_ends_with?: Maybe<String>;
  mobile_not_ends_with?: Maybe<String>;
  profile_image?: Maybe<String>;
  profile_image_not?: Maybe<String>;
  profile_image_in?: Maybe<String[] | String>;
  profile_image_not_in?: Maybe<String[] | String>;
  profile_image_lt?: Maybe<String>;
  profile_image_lte?: Maybe<String>;
  profile_image_gt?: Maybe<String>;
  profile_image_gte?: Maybe<String>;
  profile_image_contains?: Maybe<String>;
  profile_image_not_contains?: Maybe<String>;
  profile_image_starts_with?: Maybe<String>;
  profile_image_not_starts_with?: Maybe<String>;
  profile_image_ends_with?: Maybe<String>;
  profile_image_not_ends_with?: Maybe<String>;
  lead_source?: Maybe<String>;
  lead_source_not?: Maybe<String>;
  lead_source_in?: Maybe<String[] | String>;
  lead_source_not_in?: Maybe<String[] | String>;
  lead_source_lt?: Maybe<String>;
  lead_source_lte?: Maybe<String>;
  lead_source_gt?: Maybe<String>;
  lead_source_gte?: Maybe<String>;
  lead_source_contains?: Maybe<String>;
  lead_source_not_contains?: Maybe<String>;
  lead_source_starts_with?: Maybe<String>;
  lead_source_not_starts_with?: Maybe<String>;
  lead_source_ends_with?: Maybe<String>;
  lead_source_not_ends_with?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  refferalBonus_not?: Maybe<String>;
  refferalBonus_in?: Maybe<String[] | String>;
  refferalBonus_not_in?: Maybe<String[] | String>;
  refferalBonus_lt?: Maybe<String>;
  refferalBonus_lte?: Maybe<String>;
  refferalBonus_gt?: Maybe<String>;
  refferalBonus_gte?: Maybe<String>;
  refferalBonus_contains?: Maybe<String>;
  refferalBonus_not_contains?: Maybe<String>;
  refferalBonus_starts_with?: Maybe<String>;
  refferalBonus_not_starts_with?: Maybe<String>;
  refferalBonus_ends_with?: Maybe<String>;
  refferalBonus_not_ends_with?: Maybe<String>;
  profession?: Maybe<String>;
  profession_not?: Maybe<String>;
  profession_in?: Maybe<String[] | String>;
  profession_not_in?: Maybe<String[] | String>;
  profession_lt?: Maybe<String>;
  profession_lte?: Maybe<String>;
  profession_gt?: Maybe<String>;
  profession_gte?: Maybe<String>;
  profession_contains?: Maybe<String>;
  profession_not_contains?: Maybe<String>;
  profession_starts_with?: Maybe<String>;
  profession_not_starts_with?: Maybe<String>;
  profession_ends_with?: Maybe<String>;
  profession_not_ends_with?: Maybe<String>;
  outcome?: Maybe<String>;
  outcome_not?: Maybe<String>;
  outcome_in?: Maybe<String[] | String>;
  outcome_not_in?: Maybe<String[] | String>;
  outcome_lt?: Maybe<String>;
  outcome_lte?: Maybe<String>;
  outcome_gt?: Maybe<String>;
  outcome_gte?: Maybe<String>;
  outcome_contains?: Maybe<String>;
  outcome_not_contains?: Maybe<String>;
  outcome_starts_with?: Maybe<String>;
  outcome_not_starts_with?: Maybe<String>;
  outcome_ends_with?: Maybe<String>;
  outcome_not_ends_with?: Maybe<String>;
  recording?: Maybe<Boolean>;
  recording_not?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  my_emotions_not?: Maybe<String>;
  my_emotions_in?: Maybe<String[] | String>;
  my_emotions_not_in?: Maybe<String[] | String>;
  my_emotions_lt?: Maybe<String>;
  my_emotions_lte?: Maybe<String>;
  my_emotions_gt?: Maybe<String>;
  my_emotions_gte?: Maybe<String>;
  my_emotions_contains?: Maybe<String>;
  my_emotions_not_contains?: Maybe<String>;
  my_emotions_starts_with?: Maybe<String>;
  my_emotions_not_starts_with?: Maybe<String>;
  my_emotions_ends_with?: Maybe<String>;
  my_emotions_not_ends_with?: Maybe<String>;
  call_conclusion?: Maybe<String>;
  call_conclusion_not?: Maybe<String>;
  call_conclusion_in?: Maybe<String[] | String>;
  call_conclusion_not_in?: Maybe<String[] | String>;
  call_conclusion_lt?: Maybe<String>;
  call_conclusion_lte?: Maybe<String>;
  call_conclusion_gt?: Maybe<String>;
  call_conclusion_gte?: Maybe<String>;
  call_conclusion_contains?: Maybe<String>;
  call_conclusion_not_contains?: Maybe<String>;
  call_conclusion_starts_with?: Maybe<String>;
  call_conclusion_not_starts_with?: Maybe<String>;
  call_conclusion_ends_with?: Maybe<String>;
  call_conclusion_not_ends_with?: Maybe<String>;
  AND?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  OR?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
  NOT?: Maybe<CustomerWhereInput[] | CustomerWhereInput>;
}

export interface PartnerSubscriptionWhereInput {
  mutation_in?: Maybe<MutationType[] | MutationType>;
  updatedFields_contains?: Maybe<String>;
  updatedFields_contains_every?: Maybe<String[] | String>;
  updatedFields_contains_some?: Maybe<String[] | String>;
  node?: Maybe<PartnerWhereInput>;
  AND?: Maybe<PartnerSubscriptionWhereInput[] | PartnerSubscriptionWhereInput>;
  OR?: Maybe<PartnerSubscriptionWhereInput[] | PartnerSubscriptionWhereInput>;
  NOT?: Maybe<PartnerSubscriptionWhereInput[] | PartnerSubscriptionWhereInput>;
}

export interface ProspectUpdateInput {
  name?: Maybe<String>;
  lastName?: Maybe<String>;
  firstName?: Maybe<String>;
  email?: Maybe<String>;
  call_length?: Maybe<String>;
  description?: Maybe<String>;
  mobile?: Maybe<String>;
  profile_image?: Maybe<String>;
  lead_source?: Maybe<String>;
  refferalBonus?: Maybe<String>;
  profession?: Maybe<String>;
  outcome?: Maybe<String>;
  recording?: Maybe<Boolean>;
  my_emotions?: Maybe<String>;
  call_conclusion?: Maybe<String>;
}

export interface NodeNode {
  id: ID_Output;
}

export interface CustomerEdge {
  node: Customer;
  cursor: String;
}

export interface CustomerEdgePromise
  extends Promise<CustomerEdge>,
    Fragmentable {
  node: <T = CustomerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface CustomerEdgeSubscription
  extends Promise<AsyncIterator<CustomerEdge>>,
    Fragmentable {
  node: <T = CustomerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserPreviousValues {
  id: ID_Output;
  name: String;
  email: String;
  createdAt: DateTimeOutput;
  description?: String;
  password: String;
  usertype?: String;
  isAdmin?: Boolean;
  lastName?: String;
  firstName?: String;
  updatedAt?: DateTimeOutput;
  mobile?: String;
  profile_image?: String;
  approved?: Boolean;
  refferalBonus?: String;
  profession?: String;
}

export interface UserPreviousValuesPromise
  extends Promise<UserPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  password: () => Promise<String>;
  usertype: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  approved: () => Promise<Boolean>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
}

export interface UserPreviousValuesSubscription
  extends Promise<AsyncIterator<UserPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  usertype: () => Promise<AsyncIterator<String>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mobile: () => Promise<AsyncIterator<String>>;
  profile_image: () => Promise<AsyncIterator<String>>;
  approved: () => Promise<AsyncIterator<Boolean>>;
  refferalBonus: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
}

export interface CustomerConnection {
  pageInfo: PageInfo;
  edges: CustomerEdge[];
}

export interface CustomerConnectionPromise
  extends Promise<CustomerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<CustomerEdge>>() => T;
  aggregate: <T = AggregateCustomerPromise>() => T;
}

export interface CustomerConnectionSubscription
  extends Promise<AsyncIterator<CustomerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<CustomerEdgeSubscription>>>() => T;
  aggregate: <T = AggregateCustomerSubscription>() => T;
}

export interface UserEdge {
  node: User;
  cursor: String;
}

export interface UserEdgePromise extends Promise<UserEdge>, Fragmentable {
  node: <T = UserPromise>() => T;
  cursor: () => Promise<String>;
}

export interface UserEdgeSubscription
  extends Promise<AsyncIterator<UserEdge>>,
    Fragmentable {
  node: <T = UserSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface UserConnection {
  pageInfo: PageInfo;
  edges: UserEdge[];
}

export interface UserConnectionPromise
  extends Promise<UserConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<UserEdge>>() => T;
  aggregate: <T = AggregateUserPromise>() => T;
}

export interface UserConnectionSubscription
  extends Promise<AsyncIterator<UserConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<UserEdgeSubscription>>>() => T;
  aggregate: <T = AggregateUserSubscription>() => T;
}

export interface ProspectSubscriptionPayload {
  mutation: MutationType;
  node: Prospect;
  updatedFields: String[];
  previousValues: ProspectPreviousValues;
}

export interface ProspectSubscriptionPayloadPromise
  extends Promise<ProspectSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ProspectPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ProspectPreviousValuesPromise>() => T;
}

export interface ProspectSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ProspectSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ProspectSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ProspectPreviousValuesSubscription>() => T;
}

export interface AggregateUser {
  count: Int;
}

export interface AggregateUserPromise
  extends Promise<AggregateUser>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateUserSubscription
  extends Promise<AsyncIterator<AggregateUser>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ProspectEdge {
  node: Prospect;
  cursor: String;
}

export interface ProspectEdgePromise
  extends Promise<ProspectEdge>,
    Fragmentable {
  node: <T = ProspectPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ProspectEdgeSubscription
  extends Promise<AsyncIterator<ProspectEdge>>,
    Fragmentable {
  node: <T = ProspectSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface User {
  id: ID_Output;
  name: String;
  email: String;
  createdAt: DateTimeOutput;
  description?: String;
  password: String;
  usertype?: String;
  isAdmin?: Boolean;
  lastName?: String;
  firstName?: String;
  updatedAt?: DateTimeOutput;
  mobile?: String;
  profile_image?: String;
  approved?: Boolean;
  refferalBonus?: String;
  profession?: String;
}

export interface UserPromise extends Promise<User>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  password: () => Promise<String>;
  usertype: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  approved: () => Promise<Boolean>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
}

export interface UserSubscription
  extends Promise<AsyncIterator<User>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  description: () => Promise<AsyncIterator<String>>;
  password: () => Promise<AsyncIterator<String>>;
  usertype: () => Promise<AsyncIterator<String>>;
  isAdmin: () => Promise<AsyncIterator<Boolean>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mobile: () => Promise<AsyncIterator<String>>;
  profile_image: () => Promise<AsyncIterator<String>>;
  approved: () => Promise<AsyncIterator<Boolean>>;
  refferalBonus: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
}

export interface UserNullablePromise
  extends Promise<User | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  description: () => Promise<String>;
  password: () => Promise<String>;
  usertype: () => Promise<String>;
  isAdmin: () => Promise<Boolean>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  approved: () => Promise<Boolean>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
}

export interface UserSubscriptionPayload {
  mutation: MutationType;
  node: User;
  updatedFields: String[];
  previousValues: UserPreviousValues;
}

export interface UserSubscriptionPayloadPromise
  extends Promise<UserSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = UserPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = UserPreviousValuesPromise>() => T;
}

export interface UserSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<UserSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = UserSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = UserPreviousValuesSubscription>() => T;
}

export interface Customer {
  id: ID_Output;
  name: String;
  lastName?: String;
  firstName?: String;
  email: String;
  createdAt: DateTimeOutput;
  call_length?: String;
  description?: String;
  updatedAt?: DateTimeOutput;
  mobile?: String;
  profile_image?: String;
  lead_source?: String;
  refferalBonus?: String;
  profession?: String;
  outcome?: String;
  recording?: Boolean;
  my_emotions?: String;
  call_conclusion?: String;
}

export interface CustomerPromise extends Promise<Customer>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface CustomerSubscription
  extends Promise<AsyncIterator<Customer>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  call_length: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mobile: () => Promise<AsyncIterator<String>>;
  profile_image: () => Promise<AsyncIterator<String>>;
  lead_source: () => Promise<AsyncIterator<String>>;
  refferalBonus: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  outcome: () => Promise<AsyncIterator<String>>;
  recording: () => Promise<AsyncIterator<Boolean>>;
  my_emotions: () => Promise<AsyncIterator<String>>;
  call_conclusion: () => Promise<AsyncIterator<String>>;
}

export interface CustomerNullablePromise
  extends Promise<Customer | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface Applicant {
  id: ID_Output;
  name: String;
  lastName?: String;
  firstName?: String;
  email: String;
  createdAt: DateTimeOutput;
  call_length?: String;
  description?: String;
  updatedAt?: DateTimeOutput;
  mobile?: String;
  profile_image?: String;
  lead_source?: String;
  refferalBonus?: String;
  profession?: String;
  outcome?: String;
  recording?: Boolean;
  my_emotions?: String;
  call_conclusion?: String;
}

export interface ApplicantPromise extends Promise<Applicant>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface ApplicantSubscription
  extends Promise<AsyncIterator<Applicant>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  call_length: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mobile: () => Promise<AsyncIterator<String>>;
  profile_image: () => Promise<AsyncIterator<String>>;
  lead_source: () => Promise<AsyncIterator<String>>;
  refferalBonus: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  outcome: () => Promise<AsyncIterator<String>>;
  recording: () => Promise<AsyncIterator<Boolean>>;
  my_emotions: () => Promise<AsyncIterator<String>>;
  call_conclusion: () => Promise<AsyncIterator<String>>;
}

export interface ApplicantNullablePromise
  extends Promise<Applicant | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface ProspectPreviousValues {
  id: ID_Output;
  name: String;
  lastName?: String;
  firstName?: String;
  email: String;
  createdAt: DateTimeOutput;
  call_length?: String;
  description?: String;
  updatedAt?: DateTimeOutput;
  mobile?: String;
  profile_image?: String;
  lead_source?: String;
  refferalBonus?: String;
  profession?: String;
  outcome?: String;
  recording?: Boolean;
  my_emotions?: String;
  call_conclusion?: String;
}

export interface ProspectPreviousValuesPromise
  extends Promise<ProspectPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface ProspectPreviousValuesSubscription
  extends Promise<AsyncIterator<ProspectPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  call_length: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mobile: () => Promise<AsyncIterator<String>>;
  profile_image: () => Promise<AsyncIterator<String>>;
  lead_source: () => Promise<AsyncIterator<String>>;
  refferalBonus: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  outcome: () => Promise<AsyncIterator<String>>;
  recording: () => Promise<AsyncIterator<Boolean>>;
  my_emotions: () => Promise<AsyncIterator<String>>;
  call_conclusion: () => Promise<AsyncIterator<String>>;
}

export interface AggregatePartner {
  count: Int;
}

export interface AggregatePartnerPromise
  extends Promise<AggregatePartner>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregatePartnerSubscription
  extends Promise<AsyncIterator<AggregatePartner>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface ApplicantSubscriptionPayload {
  mutation: MutationType;
  node: Applicant;
  updatedFields: String[];
  previousValues: ApplicantPreviousValues;
}

export interface ApplicantSubscriptionPayloadPromise
  extends Promise<ApplicantSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = ApplicantPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = ApplicantPreviousValuesPromise>() => T;
}

export interface ApplicantSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<ApplicantSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = ApplicantSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = ApplicantPreviousValuesSubscription>() => T;
}

export interface PartnerConnection {
  pageInfo: PageInfo;
  edges: PartnerEdge[];
}

export interface PartnerConnectionPromise
  extends Promise<PartnerConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<PartnerEdge>>() => T;
  aggregate: <T = AggregatePartnerPromise>() => T;
}

export interface PartnerConnectionSubscription
  extends Promise<AsyncIterator<PartnerConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<PartnerEdgeSubscription>>>() => T;
  aggregate: <T = AggregatePartnerSubscription>() => T;
}

export interface ApplicantPreviousValues {
  id: ID_Output;
  name: String;
  lastName?: String;
  firstName?: String;
  email: String;
  createdAt: DateTimeOutput;
  call_length?: String;
  description?: String;
  updatedAt?: DateTimeOutput;
  mobile?: String;
  profile_image?: String;
  lead_source?: String;
  refferalBonus?: String;
  profession?: String;
  outcome?: String;
  recording?: Boolean;
  my_emotions?: String;
  call_conclusion?: String;
}

export interface ApplicantPreviousValuesPromise
  extends Promise<ApplicantPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface ApplicantPreviousValuesSubscription
  extends Promise<AsyncIterator<ApplicantPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  call_length: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mobile: () => Promise<AsyncIterator<String>>;
  profile_image: () => Promise<AsyncIterator<String>>;
  lead_source: () => Promise<AsyncIterator<String>>;
  refferalBonus: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  outcome: () => Promise<AsyncIterator<String>>;
  recording: () => Promise<AsyncIterator<Boolean>>;
  my_emotions: () => Promise<AsyncIterator<String>>;
  call_conclusion: () => Promise<AsyncIterator<String>>;
}

export interface Partner {
  id: ID_Output;
  name: String;
  lastName?: String;
  firstName?: String;
  email: String;
  createdAt: DateTimeOutput;
  call_length?: String;
  description?: String;
  updatedAt?: DateTimeOutput;
  mobile?: String;
  profile_image?: String;
  lead_source?: String;
  refferalBonus?: String;
  profession?: String;
  outcome?: String;
  recording?: Boolean;
  my_emotions?: String;
  call_conclusion?: String;
}

export interface PartnerPromise extends Promise<Partner>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface PartnerSubscription
  extends Promise<AsyncIterator<Partner>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  call_length: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mobile: () => Promise<AsyncIterator<String>>;
  profile_image: () => Promise<AsyncIterator<String>>;
  lead_source: () => Promise<AsyncIterator<String>>;
  refferalBonus: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  outcome: () => Promise<AsyncIterator<String>>;
  recording: () => Promise<AsyncIterator<Boolean>>;
  my_emotions: () => Promise<AsyncIterator<String>>;
  call_conclusion: () => Promise<AsyncIterator<String>>;
}

export interface PartnerNullablePromise
  extends Promise<Partner | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface AggregateApplicant {
  count: Int;
}

export interface AggregateApplicantPromise
  extends Promise<AggregateApplicant>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateApplicantSubscription
  extends Promise<AsyncIterator<AggregateApplicant>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface AggregateProspect {
  count: Int;
}

export interface AggregateProspectPromise
  extends Promise<AggregateProspect>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateProspectSubscription
  extends Promise<AsyncIterator<AggregateProspect>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

export interface CustomerSubscriptionPayload {
  mutation: MutationType;
  node: Customer;
  updatedFields: String[];
  previousValues: CustomerPreviousValues;
}

export interface CustomerSubscriptionPayloadPromise
  extends Promise<CustomerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = CustomerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = CustomerPreviousValuesPromise>() => T;
}

export interface CustomerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<CustomerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = CustomerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = CustomerPreviousValuesSubscription>() => T;
}

export interface ProspectConnection {
  pageInfo: PageInfo;
  edges: ProspectEdge[];
}

export interface ProspectConnectionPromise
  extends Promise<ProspectConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ProspectEdge>>() => T;
  aggregate: <T = AggregateProspectPromise>() => T;
}

export interface ProspectConnectionSubscription
  extends Promise<AsyncIterator<ProspectConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ProspectEdgeSubscription>>>() => T;
  aggregate: <T = AggregateProspectSubscription>() => T;
}

export interface CustomerPreviousValues {
  id: ID_Output;
  name: String;
  lastName?: String;
  firstName?: String;
  email: String;
  createdAt: DateTimeOutput;
  call_length?: String;
  description?: String;
  updatedAt?: DateTimeOutput;
  mobile?: String;
  profile_image?: String;
  lead_source?: String;
  refferalBonus?: String;
  profession?: String;
  outcome?: String;
  recording?: Boolean;
  my_emotions?: String;
  call_conclusion?: String;
}

export interface CustomerPreviousValuesPromise
  extends Promise<CustomerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface CustomerPreviousValuesSubscription
  extends Promise<AsyncIterator<CustomerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  call_length: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mobile: () => Promise<AsyncIterator<String>>;
  profile_image: () => Promise<AsyncIterator<String>>;
  lead_source: () => Promise<AsyncIterator<String>>;
  refferalBonus: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  outcome: () => Promise<AsyncIterator<String>>;
  recording: () => Promise<AsyncIterator<Boolean>>;
  my_emotions: () => Promise<AsyncIterator<String>>;
  call_conclusion: () => Promise<AsyncIterator<String>>;
}

export interface PartnerEdge {
  node: Partner;
  cursor: String;
}

export interface PartnerEdgePromise extends Promise<PartnerEdge>, Fragmentable {
  node: <T = PartnerPromise>() => T;
  cursor: () => Promise<String>;
}

export interface PartnerEdgeSubscription
  extends Promise<AsyncIterator<PartnerEdge>>,
    Fragmentable {
  node: <T = PartnerSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface PageInfo {
  hasNextPage: Boolean;
  hasPreviousPage: Boolean;
  startCursor?: String;
  endCursor?: String;
}

export interface PageInfoPromise extends Promise<PageInfo>, Fragmentable {
  hasNextPage: () => Promise<Boolean>;
  hasPreviousPage: () => Promise<Boolean>;
  startCursor: () => Promise<String>;
  endCursor: () => Promise<String>;
}

export interface PageInfoSubscription
  extends Promise<AsyncIterator<PageInfo>>,
    Fragmentable {
  hasNextPage: () => Promise<AsyncIterator<Boolean>>;
  hasPreviousPage: () => Promise<AsyncIterator<Boolean>>;
  startCursor: () => Promise<AsyncIterator<String>>;
  endCursor: () => Promise<AsyncIterator<String>>;
}

export interface PartnerPreviousValues {
  id: ID_Output;
  name: String;
  lastName?: String;
  firstName?: String;
  email: String;
  createdAt: DateTimeOutput;
  call_length?: String;
  description?: String;
  updatedAt?: DateTimeOutput;
  mobile?: String;
  profile_image?: String;
  lead_source?: String;
  refferalBonus?: String;
  profession?: String;
  outcome?: String;
  recording?: Boolean;
  my_emotions?: String;
  call_conclusion?: String;
}

export interface PartnerPreviousValuesPromise
  extends Promise<PartnerPreviousValues>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface PartnerPreviousValuesSubscription
  extends Promise<AsyncIterator<PartnerPreviousValues>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  call_length: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mobile: () => Promise<AsyncIterator<String>>;
  profile_image: () => Promise<AsyncIterator<String>>;
  lead_source: () => Promise<AsyncIterator<String>>;
  refferalBonus: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  outcome: () => Promise<AsyncIterator<String>>;
  recording: () => Promise<AsyncIterator<Boolean>>;
  my_emotions: () => Promise<AsyncIterator<String>>;
  call_conclusion: () => Promise<AsyncIterator<String>>;
}

export interface PartnerSubscriptionPayload {
  mutation: MutationType;
  node: Partner;
  updatedFields: String[];
  previousValues: PartnerPreviousValues;
}

export interface PartnerSubscriptionPayloadPromise
  extends Promise<PartnerSubscriptionPayload>,
    Fragmentable {
  mutation: () => Promise<MutationType>;
  node: <T = PartnerPromise>() => T;
  updatedFields: () => Promise<String[]>;
  previousValues: <T = PartnerPreviousValuesPromise>() => T;
}

export interface PartnerSubscriptionPayloadSubscription
  extends Promise<AsyncIterator<PartnerSubscriptionPayload>>,
    Fragmentable {
  mutation: () => Promise<AsyncIterator<MutationType>>;
  node: <T = PartnerSubscription>() => T;
  updatedFields: () => Promise<AsyncIterator<String[]>>;
  previousValues: <T = PartnerPreviousValuesSubscription>() => T;
}

export interface ApplicantEdge {
  node: Applicant;
  cursor: String;
}

export interface ApplicantEdgePromise
  extends Promise<ApplicantEdge>,
    Fragmentable {
  node: <T = ApplicantPromise>() => T;
  cursor: () => Promise<String>;
}

export interface ApplicantEdgeSubscription
  extends Promise<AsyncIterator<ApplicantEdge>>,
    Fragmentable {
  node: <T = ApplicantSubscription>() => T;
  cursor: () => Promise<AsyncIterator<String>>;
}

export interface ApplicantConnection {
  pageInfo: PageInfo;
  edges: ApplicantEdge[];
}

export interface ApplicantConnectionPromise
  extends Promise<ApplicantConnection>,
    Fragmentable {
  pageInfo: <T = PageInfoPromise>() => T;
  edges: <T = FragmentableArray<ApplicantEdge>>() => T;
  aggregate: <T = AggregateApplicantPromise>() => T;
}

export interface ApplicantConnectionSubscription
  extends Promise<AsyncIterator<ApplicantConnection>>,
    Fragmentable {
  pageInfo: <T = PageInfoSubscription>() => T;
  edges: <T = Promise<AsyncIterator<ApplicantEdgeSubscription>>>() => T;
  aggregate: <T = AggregateApplicantSubscription>() => T;
}

export interface Prospect {
  id: ID_Output;
  name: String;
  lastName?: String;
  firstName?: String;
  email: String;
  createdAt: DateTimeOutput;
  call_length?: String;
  description?: String;
  updatedAt?: DateTimeOutput;
  mobile?: String;
  profile_image?: String;
  lead_source?: String;
  refferalBonus?: String;
  profession?: String;
  outcome?: String;
  recording?: Boolean;
  my_emotions?: String;
  call_conclusion?: String;
}

export interface ProspectPromise extends Promise<Prospect>, Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface ProspectSubscription
  extends Promise<AsyncIterator<Prospect>>,
    Fragmentable {
  id: () => Promise<AsyncIterator<ID_Output>>;
  name: () => Promise<AsyncIterator<String>>;
  lastName: () => Promise<AsyncIterator<String>>;
  firstName: () => Promise<AsyncIterator<String>>;
  email: () => Promise<AsyncIterator<String>>;
  createdAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  call_length: () => Promise<AsyncIterator<String>>;
  description: () => Promise<AsyncIterator<String>>;
  updatedAt: () => Promise<AsyncIterator<DateTimeOutput>>;
  mobile: () => Promise<AsyncIterator<String>>;
  profile_image: () => Promise<AsyncIterator<String>>;
  lead_source: () => Promise<AsyncIterator<String>>;
  refferalBonus: () => Promise<AsyncIterator<String>>;
  profession: () => Promise<AsyncIterator<String>>;
  outcome: () => Promise<AsyncIterator<String>>;
  recording: () => Promise<AsyncIterator<Boolean>>;
  my_emotions: () => Promise<AsyncIterator<String>>;
  call_conclusion: () => Promise<AsyncIterator<String>>;
}

export interface ProspectNullablePromise
  extends Promise<Prospect | null>,
    Fragmentable {
  id: () => Promise<ID_Output>;
  name: () => Promise<String>;
  lastName: () => Promise<String>;
  firstName: () => Promise<String>;
  email: () => Promise<String>;
  createdAt: () => Promise<DateTimeOutput>;
  call_length: () => Promise<String>;
  description: () => Promise<String>;
  updatedAt: () => Promise<DateTimeOutput>;
  mobile: () => Promise<String>;
  profile_image: () => Promise<String>;
  lead_source: () => Promise<String>;
  refferalBonus: () => Promise<String>;
  profession: () => Promise<String>;
  outcome: () => Promise<String>;
  recording: () => Promise<Boolean>;
  my_emotions: () => Promise<String>;
  call_conclusion: () => Promise<String>;
}

export interface BatchPayload {
  count: Long;
}

export interface BatchPayloadPromise
  extends Promise<BatchPayload>,
    Fragmentable {
  count: () => Promise<Long>;
}

export interface BatchPayloadSubscription
  extends Promise<AsyncIterator<BatchPayload>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Long>>;
}

export interface AggregateCustomer {
  count: Int;
}

export interface AggregateCustomerPromise
  extends Promise<AggregateCustomer>,
    Fragmentable {
  count: () => Promise<Int>;
}

export interface AggregateCustomerSubscription
  extends Promise<AsyncIterator<AggregateCustomer>>,
    Fragmentable {
  count: () => Promise<AsyncIterator<Int>>;
}

/*
The `Boolean` scalar type represents `true` or `false`.
*/
export type Boolean = boolean;

/*
The `ID` scalar type represents a unique identifier, often used to refetch an object or as key for a cache. The ID type appears in a JSON response as a String; however, it is not intended to be human-readable. When expected as an input type, any string (such as `"4"`) or integer (such as `4`) input value will be accepted as an ID.
*/
export type ID_Input = string | number;
export type ID_Output = string;

/*
The `Int` scalar type represents non-fractional signed whole numeric values. Int can represent values between -(2^31) and 2^31 - 1.
*/
export type Int = number;

export type Long = string;

/*
DateTime scalar input type, allowing Date
*/
export type DateTimeInput = Date | string;

/*
DateTime scalar output type, which is always a string
*/
export type DateTimeOutput = string;

/*
The `String` scalar type represents textual data, represented as UTF-8 character sequences. The String type is most often used by GraphQL to represent free-form human-readable text.
*/
export type String = string;

/**
 * Model Metadata
 */

export const models: Model[] = [
  {
    name: "User",
    embedded: false
  },
  {
    name: "Prospect",
    embedded: false
  },
  {
    name: "Applicant",
    embedded: false
  },
  {
    name: "Partner",
    embedded: false
  },
  {
    name: "Customer",
    embedded: false
  }
];

/**
 * Type Defs
 */

export const prisma: Prisma;
